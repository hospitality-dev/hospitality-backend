services:
  cerbos:
    image: ghcr.io/cerbos/cerbos:0.41.0
    restart: unless-stopped
    command: [ "server", "--config=/config/cerbos.yaml" ]
    environment:
      CERBOS_PASSWORD_HASH: ${CERBOS_PASSWORD_HASH}
    volumes:
      - "./cerbos/cerbos.yaml:/config/cerbos.yaml"
      - "./cerbos/policies:/config/policies"
    networks:
      - internal
  valkey:
    image: valkey/valkey:latest
    container_name: hospitality-valkey
    restart: unless-stopped
    environment:
      VALKEY_USER: ${VALKEY_USER}
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
    command: >
      sh -c "echo 'requirepass ${VALKEY_PASSWORD}' > /tmp/valkey.conf &&
            echo 'user ${VALKEY_USER} on >${VALKEY_PASSWORD} ~* +@all' >> /tmp/valkey.conf &&
            valkey-server /tmp/valkey.conf"
    healthcheck:
      test: ["CMD", "valkey-cli", "-u", "${VALKEY_USER}", "-a", "${VALKEY_PASSWORD}", "ping"]
      interval: 10s
      retries: 3
    volumes:
      - valkey_data:/data
    # ports:
      # - "6379:6379"
    networks:
      - internal
  postgres:
    image: postgres:17.2
    container_name: hospitality-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 30s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
  dbmate:
    image: ghcr.io/amacneil/dbmate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
    volumes:
      - ./db:/db
    entrypoint: ["sh", "-c", "dbmate up"]
    networks:
      - internal
    restart: "no"
  hospitality-server:
    build:
      context: ./
    ports:
      - "4000:4000"
    restart: always
    depends_on:
      - postgres
      - valkey
      - cerbos
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT}
      - SERVER_URL=${SERVER_URL}
      - COOKIE_ENCRYPTION_KEY=${COOKIE_ENCRYPTION_KEY}
      - BASE_FE_URL=${BASE_FE_URL}

      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      - CERBOS_URL=${CERBOS_URL}
      - CERBOS_PASSWORD_HASH=${CERBOS_PASSWORD_HASH}

      - VALKEY_URL=${VALKEY_URL}
      - VALKEY_USER=${VALKEY_USER}
      - VALKEY_PASSWORD=${VALKEY_PASSWORD}
      - RESEND_API_KEY=${RESEND_API_KEY}

      - LOKI_URL=${LOKI_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      # S3
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_NAME=${S3_NAME}
      - S3_REGION=${S3_REGION}
      - S3_SECRET=${S3_SECRET}
    networks:
      - internal
      - external
  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    restart: unless-stopped
    environment:
    - S3_ACCESS_KEY=${S3_ACCESS_KEY}
    - S3_SECRET=${S3_SECRET}
    - S3_NAME=${S3_NAME}
    - S3_REGION=${S3_REGION}
    - S3_ENDPOINT=${S3_ENDPOINT}
    volumes:
    - ./loki-config.yaml:/etc/loki-config.yaml
    command: -config.file=/etc/loki-config.yaml -config.expand-env=true
    networks:
      - internal
    depends_on:
      - hospitality-server
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    networks:
      - internal
      - external
    depends_on:
      - loki
    volumes:
      - grafana-data:/var/lib/grafana
volumes:
  postgres_data:
  valkey_data:
  grafana-data:
    driver: local

networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge